#!/bin/bash

serial=/dev/ttyUSB0
timeout=1

usage() {
    cat 1>&2 <<EOF
FrugalWatchdog helper script.
Parameters:

  timeout <seconds>
  start
  stop
  reset
  status
  clearmem

The 'status' command will print the elapsed time, the timeout and the
time of last reset using the time format of your current locale.

Parameters 'test' and 'repair' are aliased to 'reset' for compatibility
with the watchdog(8) daemon. This script can be dropped in the
/etc/watchdog.d/ directory.
EOF
}

if [ -z "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
    usage
    exit
fi

exec 3<> "$serial" || exit $?
stty 2400 hupcl igncr -icrnl -opost -isig -icanon -iexten -echo < "$serial" || exit $?

write_serial() {
    printf "$@" >&3
    # Give the device time to handle the message. Giving two commands in too
    # quick a succession tends to confuse it.
    sleep 0.1
}

# Discard any data that might be in the serial buffer.
read -t 0.1 <&3

if [ "$1" = "reset" ] || [ "$1" = "start" ] \
   || [ "$1" = "test" ] || [ "$1" = "repair" ] ; then
    write_serial "reset\r%s\r" "$(date +%s)"
elif [ "$1" = "timeout" ] && [ -n "$2" ] ; then
    write_serial "timeout\r%s\r" "$2"
elif [ "$1" = "status" ] ; then
    write_serial "status\r"
    read -t "$timeout" elapsed slash timeoutval <&3 || exit $?
    printf "Elapsed / timeout: %s s / %s s\n" "$elapsed" "$timeoutval"
    read -t "$timeout" line <&3 || exit $?
    d=$(date -d @"${line:-0}")
    printf "Watchdog was last triggered at: %s\n" "$d"
elif [ "$1" = "stop" ] ; then
    write_serial "stop\r"
elif [ "$1" = "clearmem" ] ; then
    write_serial "clearmem\r"
else
    usage
fi
